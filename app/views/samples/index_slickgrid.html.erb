<% if @samples.size >=0 %>
<span class='info'><%= @samples.size %> <%= (@samples.size > 1 ) ? 'have' : 'has' %> been found!</span>
<div id='grid' style='height:300px'></div>
<span id='save_samples' class='button'>Save Samples</span>
 <span id='delete_samples' class='button'>Delete Samples</span>
<style>
    .slick-cell-checkboxsel {
      background: #f0f0f0;
      border-right-color: silver;
      border-right-style: solid;
    }

.slick-row.active .slick-cell {
     background-color: #CCCCCC;
}
  </style>

<%= javascript_tag do %>
    document.getElementById('save_samples').style.display = (current_sample_id == null) ? "none" : "table-cell";

    function requiredFieldValidator(value) {
        if (value == null || value == undefined || !value.length) {
            return {valid: false, msg: "This is a required field"};
        } else {
            return {valid: true, msg: null};
        }
    }
    function yearFieldValidator(value) {
        if (value < 1900 || value > 2050) {
            return {valid: false, msg: "This is a year field"};
        } else {
            return {valid: true, msg: null};
        }
    }
    var grid;
    var columns = [
    {id: "id", name: "Id", field: "id", width: 20},
    {id: "name", name: "Name", field: "name", editor: Slick.Editors.Text, width: 200, validator: requiredFieldValidator},
    //  {id: "created_at", name: "Created_at", field: "created_at"},
    {id: "date", name: "created at", field: "date"},
    {id: "protocole", name: "Protocole", field: "protocole", editor: Slick.Editors.Text},
    {id: "description", name: "Description", field: "description", editor: Slick.Editors.Text}
    ];

    // add editors to columns of attributes
    var l = columns.length;
    columns = $.merge(columns, <%= raw @list_columns.to_json %>);
//    alert(columns[columns.length - 1].name);
    for (var i = 0; i < columns.length - l; ++i) {
        var index = [columns.length - 1 - i];
        var widget = columns[index]["widget"];
        switch(widget) {
            case 1:
            case 2:
                columns[index]["editor"] = Slick.Editors.Text;
                break;
            case 3:
            case 4:
                columns[index]["editor"] = Slick.Editors.Checkbox;
                columns[index]["formatter"] = Slick.Formatters.Checkmark;
                break;
            case 5:
                columns[index]["editor"] = Slick.Editors.SelectCell;
                break;
            case 6:
                columns[index]["editor"] = Slick.Editors.Integer;
                break;
            case 7: // year
                columns[index]["editor"] = Slick.Editors.Integer;
                columns[index]["validator"] = yearFieldValidator
                break;
            default:
                columns[index]["editor"] = Slick.Editors.Text;
        }
    }
    var options = {
        enableCellNavigation: true,
        enableColumnReorder: false,
        explicitInitialization: true,
        editable: true,
        rowHeight: 22,
        forceFitColumns: true
    };
    
    $(function () {
       var data = <%= raw @SlickGridSampleData.to_json %>;
       // Need to use a DataView for the filter plugin
       var dataView = new Slick.Data.DataView();
       grid = new Slick.Grid("#grid", dataView, columns, options);
     grid.setSelectionModel(new Slick.CellSelectionModel());
//       grid.setSelectionModel(new Slick.RowSelectionModel());

       // to make selection with checkbox
       var checkboxSelector = new Slick.CheckboxSelectColumn({
            cssClass: "slick-cell-checkboxsel"
       });
       // add element with checkbox to the beginning
       columns.unshift(checkboxSelector.getColumnDefinition());
//       grid.setSelectionModel(new Slick.RowSelectionModel({selectActiveRow: false}));
       grid.setSelectionModel(new Slick.RowSelectionModel({selectActiveRow: true}));
       grid.registerPlugin(checkboxSelector);
       var columnpicker = new Slick.Controls.ColumnPicker(columns, grid, options);

       if (data[0]) {
           current_sample_id = data[0]['id'];
//            grid.gotoCell(0, 2, false);
//            grid.onClick.notify({row:0,cell:2}); 
       }
       else { 
           current_sample_id = null;
       }

       // update SlickGrid for measurements on sample change
       grid.onClick.subscribe(function (e, args) {
            alert('onClick');
//            var row = grid.getDataItem(args.row);
//            var cell = grid.getCellFromEvent(e);
            old_sample_id = current_sample_id;
            current_sample_id = data[args.row]['id'];
//            $(cell.cellNode).addClass("active11");
            // even if current_sample_id == 0 update_measurement_list() to clear it
            if (old_sample_id != current_sample_id && current_sample_id >= 0) {
                update_measurement_list();
            }
       });

        dataView.onRowCountChanged.subscribe(function (e, args) {
            grid.updateRowCount();
            grid.render();
        });

        dataView.onRowsChanged.subscribe(function (e, args) {
            grid.invalidateRows(args.rows);
            grid.render();
        });

        dataView.beginUpdate();
        dataView.setItems(data);
        dataView.setFilter(filter);
        dataView.endUpdate();

        var filterPlugin = new Ext.Plugins.HeaderFilter({});

        // This event is fired when a filter is selected
        filterPlugin.onFilterApplied.subscribe(function () {
            dataView.refresh();
            grid.resetActiveCell();

            // Excel like status bar at the bottom
            var status;

            if (dataView.getLength() === dataView.getItems().length) {
                status = "";
            } else {
                status = dataView.getLength() + ' OF ' + dataView.getItems().length + ' RECORDS FOUND';
            }
            $('#status-label').text(status);
        });

        // Event fired when a menu option is selected
        filterPlugin.onCommand.subscribe(function (e, args) {
            dataView.fastSort(args.column.field, args.command === "sort-asc");
        });

        grid.registerPlugin(filterPlugin);

        var overlayPlugin = new Ext.Plugins.Overlays({});

        // Event fires when a range is selected
        overlayPlugin.onFillUpDown.subscribe(function (e, args) {
            var column = grid.getColumns()[args.range.fromCell];
            // Ensure the column is editable
            if (!column.editor) {
                alert('no editable');
                return;
            }

            // Find the initial value
            var value = dataView.getItem(args.range.fromRow)[column.field];

            dataView.beginUpdate();

            // Copy the value down
            for (var i = args.range.fromRow + 1; i <= args.range.toRow; i++) {
                dataView.getItem(i)[column.field] = value;
                grid.invalidateRow(i);
            }

            dataView.endUpdate();
            grid.render();
        });

        grid.registerPlugin(overlayPlugin);

        grid.init();

        // Filter the data (using userscores _.contains)
        function filter(item) {
            var columns = grid.getColumns();
            var value = true;
            for (var i = 0; i < columns.length; i++) {
                var col = columns[i];
                var filterValues = col.filterValues;
                if (filterValues && filterValues.length > 0) {
                    value = value & _.contains(filterValues, item[col.field]);
                }
            }
            return value;
        }

// button save_samples        
    $('#save_samples').click(function(event){
        alert(JSON.stringify(data))
        if (confirm("Do you want to save changes in Samples? All unsaved data will be removed.")) {
            saveSampleTable(data);
        }
//        update_sample_list();
    });

    function saveSampleTable(sampleData) {
        jQuery.ajax({
            url: '<%= save_batch_samples_path %>?project_key=<%= @project.key %>&exp_id=' + current_exp_id,
            type: "POST",
            dataType: 'json',
            contentType: "application/json",
            processData: false,
            data: JSON.stringify(sampleData)
        }).done(function(h) {
            update_sample_list();
               // alert(JSON.stringify(sampleData));
               // window.location = h.redirect_url;
        }).fail(function(error){
                alert('Something has gone wrong: ' + error);
              //  $('.loading-wrap').remove();
                console.error("AJAX POST ERROR");
                console.error(error);
        });       
    }

// button delete_samples        
    $('#delete_samples').click(function(event){
        var selectedRowsIds = dataView.mapRowsToIds(grid.getSelectedRows());i
        // check if there is at least one non-zero id
        var index = selectedRowsIds.findIndex(function (val) {
            return val > 0; 
        });

        if (!selectedRowsIds.length || index < 0) {
            alert('Select saved samples to delete.');
            return;
        }
        if (confirm("Do you want to delete selected Samples? All unsaved data will be removed.")) {
            deleteSampleTable(selectedRowsIds);
        }
    });

    function deleteSampleTable(ids) {
        jQuery.ajax({
            url: '<%= delete_batch_samples_path %>?project_key=<%= @project.key %>&exp_id=' + current_exp_id,
            type: "POST",
            dataType: 'json',
            contentType: "application/json",
            processData: false,
            data: JSON.stringify(ids)
        }).done(function(res) {
            if (res['error']) {
                alert(res['error']);
            }
            update_sample_list();
        }).fail(function(error){
                alert('Something has gone wrong: ' + error);
                console.error("AJAX POST ERROR");
                console.error(error);
        });       
    }

// button defined in views/projects/_full_project
    $('#batch_new_samples_button').click(function(){
        n_new_samples = $('#number_new_batch_samples').val(),
        samples_data = $('#json_new_batch_samples').val()
        addNewRow(n_new_samples, samples_data);
        document.getElementById('save_samples').style.display =  "table-cell";
        event.stopPropagation();
     });

    function addNewRow(n, d){
        if (!d.length) {
            for (var i = 0; i < n; i++) {
                var item = { "id": 0, "name": "new_" };             
                dataView.addItem(item);
            }
        } else {
            try{
                sd = JSON.parse(d);
            }catch(e){
                alert(e); //error in the above string(in this case,yes)!
                return;
            }
            for (var i = 0; i < sd.length; i++) {
                    var item = {};
                    item["id"] = 0;
                    // skip checkbox column 
                    for (var j = 1; j < columns.length; j++) {
                        if (columns[j]["editor"]) {
                            item[columns[j]["field"]] = sd[i][columns[j]["field"]];
                        }
                    }
//              alert(JSON.stringify(item);
                dataView.addItem(item);
                }
        }
    }
});
<% end %>
<% else %>
    No samples found.
    <%= javascript_tag do %>
        current_sample_id = null;
    <% end %>
<% end %>
