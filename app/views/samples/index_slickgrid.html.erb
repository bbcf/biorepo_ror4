<% if @samples.size >0 %>
<span class='info'><%= @samples.size %> <%= (@samples.size > 1 ) ? 'have' : 'has' %> been found!</span>
<div id='grid' style='height:500px'></div>
    <%= javascript_tag do %>
  function requiredFieldValidator(value) {
    if (value == null || value == undefined || !value.length) {
      return {valid: false, msg: "This is a required field"};
    } else {
      return {valid: true, msg: null};
    }
  }
 var grid;
  var columns = [
   // {id: "title", name: "Title", field: "name", editor: Slick.Editors.Text, validator: requiredFieldValidator},
    {id: "title", name: "Title", field: "name", editor: Slick.Editors.Text},
    {id: "created_at", name: "Created_at", field: "created_at"},
    {id: "protocole", name: "Protocole", field: "protocole", editor: Slick.Editors.Text},
    {id: "description", name: "Description", field: "description", editor: Slick.Editors.Text}
  ];


$(function () {
            var data_1 = [];
            for (var i = 0; i < 500; i++) {
                data_1[i] = {
                    id: i,
                    title: "Task " + i
                };
            }

        var options = {
    enableAddRow: true,
    asyncEditorLoading: false,
    autoEdit: false,
            enableCellNavigation: true,
            enableColumnReorder: false,
            explicitInitialization: true,
            editable: true,
            rowHeight: 22
        };

    var data = <%= raw @samples.to_json %>;
//    $( document ).ready(function() {
//        grid = new Slick.Grid("#grid", data, columns, options);
        //grid.autosizeColumns();
//    });
            // Need to use a DataView for the filter plugin
            var dataView = new Slick.Data.DataView();

            grid = new Slick.Grid("#grid", dataView, columns, options);

            grid.setSelectionModel(new Slick.CellSelectionModel());

            dataView.onRowCountChanged.subscribe(function (e, args) {
                grid.updateRowCount();
                grid.render();
            });

            dataView.onRowsChanged.subscribe(function (e, args) {
                grid.invalidateRows(args.rows);
                grid.render();
            });

            dataView.beginUpdate();
            dataView.setItems(data);
            dataView.setFilter(filter);
            dataView.endUpdate();

            var filterPlugin = new Ext.Plugins.HeaderFilter({});

            // This event is fired when a filter is selected
            filterPlugin.onFilterApplied.subscribe(function () {
                dataView.refresh();
                grid.resetActiveCell();

                // Excel like status bar at the bottom
                var status;

                if (dataView.getLength() === dataView.getItems().length) {
                    status = "";
                } else {
                    status = dataView.getLength() + ' OF ' + dataView.getItems().length + ' RECORDS FOUND';
                }
                $('#status-label').text(status);
            });

            // Event fired when a menu option is selected
            filterPlugin.onCommand.subscribe(function (e, args) {
                dataView.fastSort(args.column.field, args.command === "sort-asc");
            });

            grid.registerPlugin(filterPlugin);

            var overlayPlugin = new Ext.Plugins.Overlays({});

            // Event fires when a range is selected
            overlayPlugin.onFillUpDown.subscribe(function (e, args) {
                var column = grid.getColumns()[args.range.fromCell];

                // Ensure the column is editable
                if (!column.editor) {
                    return;
                }

                // Find the initial value
                var value = dataView.getItem(args.range.fromRow)[column.field];

                dataView.beginUpdate();

                // Copy the value down
                for (var i = args.range.fromRow + 1; i <= args.range.toRow; i++) {
                    dataView.getItem(i)[column.field] = value;
                    grid.invalidateRow(i);
                }

                dataView.endUpdate();
                grid.render();
            });

            grid.registerPlugin(overlayPlugin);

            grid.init();

            function filter(item) {
                var columns = grid.getColumns();

                var value = true;

                for (var i = 0; i < columns.length; i++) {
                    var col = columns[i];
                    var filterValues = col.filterValues;

                    if (filterValues && filterValues.length > 0) {
                        value = value & _.contains(filterValues, item[col.field]);
                    }
                }
                return value;
            }
        });
    <% end %>

<% else %>
No samples found.
<% end %>
