<% if @measurements.size >=0 %>
<span class='info'><%= @measurements.size %> <%= (@measurements.size > 1 ) ? 'have' : 'has' %> been found!</span>
<div id='MeasurementsGrid' style='height:200px'></div>
<span id='save_measurements' class='button'>Save Measurements</span>
<span id='delete_measurements' class='button'>Delete Measurements</span>
<span id='download_measurements' class='button'>Download Measurements</span>
<%= javascript_tag do %>
    document.getElementById('save_measurements').style.display = (current_measurement_id == null) ? "table-cell" : "none";
    document.getElementById('measurement_list').style.display = (current_sample_id > 0 ) ? "table-cell" : "none";

    function requiredFieldValidator(value) {
        if (value == null || value == undefined || !value.length) {
            return {valid: false, msg: "This is a required field"};
        } else {
            return {valid: true, msg: null};
        }
    }
    function yearFieldValidator(value) {
        if (value < 1900 || value > 2050) {
            return {valid: false, msg: "This is a year field"};
        } else {
            return {valid: true, msg: null};
        }
    }
    function linkFormatter(row, cell, value, columnDef, dataContext) {
        if (value == null || value == undefined || !value.length) {
            return '';
        }
        var tmp_data_m = <%= raw @SlickGridMeasurementData.to_json %>;
        // if this row is not saved just show filename, not link
        if (tmp_data_m.length <= row) {
            return value;
        } else {
            // if file is not saved show name, not link
            if (tmp_data_m[row]['status'] != 'success') {return value;}
            original_filename = tmp_data_m[row]['filename'];
            filename = tmp_data_m[row]['sha1'];
            path = tmp_data_m[row]['path']
            var link = '<%=APP_CONFIG[:biorepo_server] + APP_CONFIG[:data_dir] + APP_CONFIG[:upload_dir]%>' + path + '/' + filename; 
            return '<a href=' +link+ '>'+ original_filename + '</a>';
        }
    }

    var grid_m;
    var columns_m = [
        {id: "id", name: "Id", field: "id", width: 20 },
        {id: "name", name: "name", field: "name", editor: Slick.Editors.Text, validator: requiredFieldValidator},
        {id: "date", name: "Created_at", field: "date"},
        {id: "raw", name: "raw", field: "raw", formatter: Slick.Formatters.Checkmark, editor: Slick.Editors.Checkbox, width: 5},
        {id: "public", name: "public", field: "public", formatter: Slick.Formatters.Checkmark, editor: Slick.Editors.Checkbox, width: 5},
        {id: "description", name: "description", field: "description", editor: Slick.Editors.Text},
// can edit file name - it is only in database
        {id: "filename", name: "filename", field: "filename", editor: Slick.Editors.Text, width: 30, formatter: linkFormatter},
        {id: "sha1", name: "Sha1", field: "sha1", width: 30},
        {id: "url_path", name: "url_path", field: "url_path"},
//        {id: "path", name: "Path", field: "path", cssClass: "cell-title", formatter: linkFormatter },
        {id: "status", name: "Status", field: "status", width: 20} 
    ];

    // add editors to columns of attributes
    var l = columns_m.length;
    columns_m = $.merge(columns_m, <%= raw @list_columns_m.to_json %>);
    for (var i = 0; i < columns_m.length - l; ++i) {
         var index = [columns_m.length - 1 - i];
         var widget = columns_m[index]["widget"];
         
         switch(widget) {
             case 1:
             case 2:
                 columns_m[index]["editor"] = Slick.Editors.Text;
                 break;
             case 3:
             case 4:
                 columns_m[index]["editor"] = Slick.Editors.Checkbox;
                 columns_m[index]["formatter"] = Slick.Formatters.Checkmark;
                 break;
             case 5:
                 columns_m[index]["editor"] = Slick.Editors.SelectCell;
                 break;
             case 6:
                 columns_m[index]["editor"] = Slick.Editors.Integer;
                 break;
             case 7: // type year
                 columns_m[index]["editor"] = Slick.Editors.Integer;
                 columns_m[index]["validator"] = yearFieldValidator
                 break;
             default:
                 columns_m[index]["editor"] = Slick.Editors.Text;
         }
     }

     var options_m = {
         enableCellNavigation: true,
         enableColumnReorder: false,
         explicitInitialization: true,
         editable: true,
         rowHeight: 22,
         forceFitColumns: true
     };

    $(function () {
      var data_m = <%= raw @SlickGridMeasurementData.to_json %>;
      // Need to use a DataView for the filter plugin
      var dataView_m = new Slick.Data.DataView();
      grid_m = new Slick.Grid("#MeasurementsGrid", dataView_m, columns_m, options_m);
//      grid_m.setSelectionModel(new Slick.CellSelectionModel());
      grid_m.setSelectionModel(new Slick.RowSelectionModel());

       // to make selection with checkbox
       var checkboxSelector = new Slick.CheckboxSelectColumn({
            cssClass: "slick-cell-checkboxsel"
       });
       // add element with checkbox to the beginning
       columns_m.unshift(checkboxSelector.getColumnDefinition());
       grid_m.setSelectionModel(new Slick.RowSelectionModel({selectActiveRow: false}));
       grid_m.registerPlugin(checkboxSelector);
       var columnpicker = new Slick.Controls.ColumnPicker(columns_m, grid_m, options_m);

       if (data_m[0]) {
           current_measurement_id = data_m[0]['id'];
       }
       else {
           current_measurement_id = null;
       }

       dataView_m.onRowCountChanged.subscribe(function (e, args) {
           grid_m.updateRowCount();
           grid_m.render();
       });

       dataView_m.onRowsChanged.subscribe(function (e, args) {
           grid_m.invalidateRows(args.rows);
           grid_m.render();
       });

       dataView_m.beginUpdate();
       dataView_m.setItems(data_m);
       dataView_m.setFilter(filter);
       dataView_m.endUpdate();

       var filterPlugin = new Ext.Plugins.HeaderFilter({});

       // This event is fired when a filter is selected
       filterPlugin.onFilterApplied.subscribe(function () {
           dataView_m.refresh();
           grid_m.resetActiveCell();

           // Excel like status bar at the bottom
           var status;

           if (dataView_m.getLength() === dataView_m.getItems().length) {
               status = "";
           } else {
               status = dataView_m.getLength() + ' OF ' + dataView_m.getItems().length + ' RECORDS FOUND';
           }
           $('#status-label').text(status);
       });

       // Event fired when a menu option is selected
       filterPlugin.onCommand.subscribe(function (e, args) {
           dataView_m.fastSort(args.column.field, args.command === "sort-asc");
       });

       grid_m.registerPlugin(filterPlugin);
       var overlayPlugin = new Ext.Plugins.Overlays({});

       // Event fires when a range is selected
       overlayPlugin.onFillUpDown.subscribe(function (e, args) {
           var column = grid_m.getColumns()[args.range.fromCell];

           // Ensure the column is editable
           if (!column.editor) {
               return;
           }
           // Find the initial value
           var value = dataView_m.getItem(args.range.fromRow)[column.field];
           dataView_m.beginUpdate();

           // Copy the value down
           for (var i = args.range.fromRow + 1; i <= args.range.toRow; i++) {
               dataView_m.getItem(i)[column.field] = value;
               grid_m.invalidateRow(i);
           }
           dataView_m.endUpdate();
           grid_m.render();
       });

       grid_m.registerPlugin(overlayPlugin);
       grid_m.init();

       function filter(item) {
           var columns = grid_m.getColumns();
           var value = true;
           for (var i = 0; i < columns.length; i++) {
               var col = columns[i];
               var filterValues = col.filterValues;
               if (filterValues && filterValues.length > 0) {
                   value = value & _.contains(filterValues, item[col.field]);
               }
           }
           return value;
       }
        
    $('#save_measurements').click(function(event){
        alert(JSON.stringify(data_m));
        if (confirm("Do you want to save changes in Measurements?")) {
            saveMeasurementTable(data_m);
        }
        update_measurement_list();
    });

    function saveMeasurementTable(measurementData) {
        jQuery.ajax({
                url: '<%= save_batch_measurements_path %>?project_key=<%= @project.key %>&sample_id=' +current_sample_id+'&exp_id=' + current_exp_id,
                type: "POST",
                dataType: 'json',
                contentType: "application/json",
                processData: false,
                data: JSON.stringify(measurementData)
            }).done(function(h) {
                   // window.location = h.redirect_url;
            }).fail(function(error){
                    alert('Something has gone wrong: ' + error);
                  //  $('.loading-wrap').remove();
                    console.error("POST ERROR");
                    console.error(error);
        });       
    }

// delete selected measurements        
    $('#delete_measurements').click(function(event){
        var selectedRowsIds = dataView_m.mapRowsToIds(grid_m.getSelectedRows());
        // check if there is at least one non-zero id
        var index = selectedRowsIds.findIndex(function (val) {
            return val > 0; 
        });

        if (!selectedRowsIds.length || index < 0) {
            alert('Select saved measurements to delete.');
            return;
        }
        if (confirm("Do you want to delete selected Measurements? All unsaved data will be removed")) {
            deleteMeasurementTable(selectedRowsIds);
        }
    });

    function deleteMeasurementTable(ids) {
        jQuery.ajax({
                url: '<%= delete_batch_measurements_path %>',
                type: "POST",
                dataType: 'json',
                contentType: "application/json",
                processData: false,
                data: JSON.stringify(ids)
            }).done(function(res) {
                if (res['error']) {
                    alert(res['error']);
                }
                update_measurement_list();
            }).fail(function(error){
                    alert('Something has gone wrong: ' + error);
                    console.error("POST ERROR");
                    console.error(error);
        });       
    }

// download selected measurements        
    $('#download_measurements').click(function(event){
        var selectedRowsIds = dataView_m.mapRowsToIds(grid_m.getSelectedRows());
        // check if there is at least one non-zero id
        var index = selectedRowsIds.findIndex(function (val) {
            return val > 0; 
        });

        if (!selectedRowsIds.length || index < 0) {
            alert('Select saved measurements to download.');
            return;
        }
        if (confirm("Do you want to download selected Measurements?")) {
            downloadMeasurementTable(selectedRowsIds);
        }
    });

    function downloadMeasurementTable(ids) {
        jQuery.ajax({
                url: '<%= download_batch_measurements_path %>',
                // POST because parameters can be long
                type: "POST",
                dataType: 'json',
                contentType: "application/json",
                processData: false,
                data: JSON.stringify(ids)
            }).done(function(res) {
                if (res['error']) {
                    alert(res['error']);
                }
            }).fail(function(error){
                    alert('Something has gone wrong: ' + error);
                    console.error("POST ERROR");
                    console.error(error);
        });       
    }

// button defined in views/projects/_full_project
    $('#batch_new_measurements_button').click(function(event){
        alert('batch new measurements');
        n_new_measurements = $('#number_new_batch_measurements').val(),
        measurements_data = $('#json_new_batch_measurements').val()
        addNewRow_m(n_new_measurements, measurements_data);
        document.getElementById('save_measurements').style.display = "table-cell";
//        event.stopPropagation();
     });

    function addNewRow_m(n, d){
        if (!dataView_m) {
            dataView_m = new Slick.Data.DataView();
        }
        if (!d.length) {
            for (var i = 0; i < n; i++) {
                var item = { "id": 0, "name": "new_" };             
                dataView_m.addItem(item);
            }
        } else {
            try{
                md = JSON.parse(d);
            }catch(e){
                alert(e); //error in the above string(in this case,yes)!
                return;
            }
            for (var i = 0; i < md.length; i++) {
                var item = {};
                item["id"] = 0;
                // skip checkbox and id columns 
                for (var j = 2; j < columns_m.length; j++) {
                    //alert( columns_m[j]["field"] + '=' + md[i][columns_m[j]["field"]])
                    //alert( columns_m[j]["field"] + '=' + md[i][columns_m[j]["name"]])
                    //only add values to fields which "field" and "name" are the same
                    // use name for input user data
                    item[columns_m[j]["field"]] = md[i][columns_m[j]["name"]];
                }
                dataView_m.addItem(item);
            }
        }
    }

});
    <% end %>

<% else %>
No measurements found.
<% end %>
